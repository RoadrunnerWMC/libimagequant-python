steps:
- task: UsePythonVersion@0
  displayName: 'Switch to Python version (non-manylinux2010)'
  inputs:
    versionSpec: '$(python.version)'
  condition: and(succeeded(), ne(variables['Agent.OS'], 'Linux'))
- script: |
    # create a wget.py script that has the most basic functionality of wget
    echo -e "import sys\nimport urllib.request\nwith urllib.request.urlopen(sys.argv[1]) as response:\n with open(sys.argv[1].split('/')[-1], 'wb') as f:\n  f.write(response.read())" > wget.py
    # run it with Python 3.7 to download PyPy
    /opt/python/cp37-cp37m/bin/python wget.py https://bitbucket.org/squeaky/portable-pypy/downloads/$(pypy.version)-portable.tar.bz2
    # unzip it
    tar xvjf $(pypy.version)-portable.tar.bz2
    # run it to download pip
    $(python.command) wget.py https://bootstrap.pypa.io/get-pip.py
    # run pip
    $(python.command) get-pip.py
  displayName: 'Manually download and install PyPy and pip (manylinux2010/pypy)'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'), eq(variables['python.version'], 'pypy3'))
- script: $(python.command) -m pip install --upgrade --user pip setuptools wheel
  displayName: 'Install/update pip, setuptools, wheel'
- script: $(python.command) -m pip install --upgrade --user auditwheel
  displayName: 'Install auditwheel (manylinux2010)'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
- script: $(python.command) -m pip install --user -r bindings/requirements.txt
  displayName: 'Install liq requirements.txt'
- script: |
    cd bindings
    $(python.command_upone) setup.py bdist_wheel
  displayName: 'Build with setuptools and cffi'
- script: |
    mkdir bindings/dist/wheelhouse
    $(python.command) -m auditwheel repair -w bindings/dist/wheelhouse/ bindings/dist/*.whl
    rm bindings/dist/*.whl
    mv bindings/dist/wheelhouse/* bindings/dist/
    rm -rf bindings/dist/wheelhouse
  displayName: 'Repair wheel (manylinux2010)'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
- bash: $(python.command) -m pip install --user bindings/dist/*.whl
  displayName: 'Install wheel with pip'
- script: brew install libjpeg zlib
  displayName: 'Install libjpeg and zlib for Pillow (Mac)'
  condition: and(succeeded(), eq(variables['python.version'], 'pypy3'), eq(variables['Agent.OS'], 'Darwin'))
- script: |
    $(python.command) wget.py http://www.zlib.net/zlib-1.2.11.tar.gz
    tar -xvzf zlib-1.2.11.tar.gz
    cd zlib-1.2.11
    ./configure --prefix=.
    make
    make install
    echo "export ZLIB_ROOT=zlib-1.2.11" >> ~/.bashrc
    ls
  displayName: 'Manually install zlib (manylinux2010/PyPy)'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'), eq(variables['python.version'], 'pypy3'))
- script:
    $(python.command) -m pip install --user Pillow pytest pytest-cov
  displayName: 'Install Pillow and pytest'
- script: |
    cd tests
    $(python.command_upone) -m pytest --junitxml=junit/test-results.xml --cov=libimagequant --cov-report=xml
  displayName: 'Test with pytest (non- Win/PyPy)'
  condition: and(succeeded(), not(and(eq(variables['python.version'], 'pypy3'), eq(variables['Agent.OS'], 'Windows_NT'))))
- script: |
    cd tests
    $(python.command_upone) -m pytest --junitxml=junit/test-results.xml --cov=libimagequant --cov-report=xml -p no:faulthandler
  displayName: 'Test with pytest (Win/PyPy)'
  condition: and(succeeded(), eq(variables['python.version'], 'pypy3'), eq(variables['Agent.OS'], 'Windows_NT'))
- task: PublishTestResults@2
  displayName: 'Publish test results'
  condition: succeededOrFailed()
  inputs:
    testResultsFiles: '**/test-*.xml'
    testRunTitle: 'Publish test results for Python $(python.version)'
- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage results'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
- task: CopyFiles@2
  displayName: 'Copy artifacts to directory'
  inputs:
    sourceFolder: bindings/dist
    contents: '*.whl'
    targetFolder: $(Build.ArtifactStagingDirectory)
- task: PublishBuildArtifacts@1
  displayName: 'Publish artifacts'
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: drop